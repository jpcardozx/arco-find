#!/usr/bin/env python3
"""
üöÄ ARCO PIPELINE - EXECUT√ÅVEL PRINCIPAL
=====================================
Execute para 5 leads qualificados dentro do ICP
Isolated pipeline with all dependencies included
BigQuery integration enabled
"""

import asyncio
import sys
import os
from pathlib import Path

# Adicionar paths necess√°rios
sys.path.append(str(Path(__file__).parent / 'core'))
sys.path.append(str(Path(__file__).parent / 'integrations'))

from core.icp_qualification_engine import ICPQualificationEngine, main as engine_main

# Import BigQuery com fallback
try:
    from integrations.bigquery_integration import ArcoBigQueryIntegration
    BIGQUERY_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è BigQuery integration n√£o dispon√≠vel")
    BIGQUERY_AVAILABLE = False

def print_header():
    """Print cabe√ßalho do pipeline"""
    print("üöÄ ARCO PIPELINE - ISOLATED EXECUTION")
    print("=" * 60)
    print("üéØ Target: 5 leads qualificados dentro do ICP")
    print("üìç Pipeline otimizado e isolado")
    print("‚ö° Powered by SearchAPI + PageSpeed APIs")
    print("=" * 60)

def print_system_check():
    """Verificar sistema antes da execu√ß√£o"""
    print("\nüîç SYSTEM CHECK:")
    
    # Verificar depend√™ncias
    try:
        import aiohttp
        print("‚úÖ aiohttp: OK")
    except ImportError:
        print("‚ùå aiohttp: MISSING - Install with: pip install aiohttp")
        return False
    
    try:
        import requests
        print("‚úÖ requests: OK")
    except ImportError:
        print("‚ùå requests: MISSING - Install with: pip install requests")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv: OK")
    except ImportError:
        print("‚ùå python-dotenv: MISSING - Install with: pip install python-dotenv")
        return False
    
    # Verificar configura√ß√£o
    try:
        from config.api_keys import validate_api_keys
        validation = validate_api_keys()
        
        if validation['searchapi']:
            print("‚úÖ SearchAPI: Configured")
        else:
            print("‚ùå SearchAPI: Missing key")
            return False
            
        if validation['pagespeed']:
            print("‚úÖ PageSpeed API: Configured")
        else:
            print("‚ùå PageSpeed API: Missing key")
            return False
            
    except Exception as e:
        print(f"‚ùå Configuration Error: {e}")
        return False
    
    return True

def install_dependencies():
    """Instalar depend√™ncias se necess√°rio"""
    print("\nüîß Installing missing dependencies...")
    
    import subprocess
    
    try:
        subprocess.check_call([
            sys.executable, '-m', 'pip', 'install', 
            'aiohttp', 'requests', 'python-dotenv'
        ])
        print("‚úÖ Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Failed to install dependencies")
        return False

async def execute_pipeline():
    """Executar pipeline principal com integra√ß√£o BigQuery"""
    print("\nüéØ EXECUTING ARCO PIPELINE...")
    print("-" * 40)
    
    # Inicializar BigQuery se dispon√≠vel
    bigquery_integration = None
    execution_id = None
    start_time = None
    
    if BIGQUERY_AVAILABLE:
        try:
            # Tentar conectar BigQuery
            print("üìä Conectando BigQuery...")
            bigquery_integration = ArcoBigQueryIntegration()
            execution_id = bigquery_integration.log_execution_start()
            print(f"‚úÖ BigQuery conectado - Execution ID: {execution_id}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è BigQuery n√£o dispon√≠vel: {e}")
            print("üîÑ Continuando execu√ß√£o sem BigQuery...")
    else:
        print("‚ö†Ô∏è BigQuery integration n√£o dispon√≠vel")
        print("üîÑ Continuando execu√ß√£o sem BigQuery...")
    
    try:
        import time
        start_time = time.time()
        
        # Executar engine principal
        leads_data = await engine_main()
        
        execution_time = time.time() - start_time
        
        # Salvar no BigQuery se dispon√≠vel
        if bigquery_integration and execution_id and leads_data:
            print("\nüìä Salvando resultados no BigQuery...")
            try:
                bigquery_integration.save_qualified_leads(leads_data, execution_id)
                bigquery_integration.log_execution_complete(
                    execution_id, execution_time, leads_data, success=True
                )
                print("‚úÖ Dados salvos no BigQuery com sucesso!")
                
                # Mostrar estat√≠sticas
                stats = bigquery_integration.get_execution_stats(days=7)
                if stats:
                    print(f"\nüìà ESTAT√çSTICAS (√∫ltimos 7 dias):")
                    print(f"   - Total execu√ß√µes: {stats.get('total_executions', 0)}")
                    print(f"   - Total leads qualificados: {stats.get('total_leads_qualified', 0)}")
                    print(f"   - Waste total detectado: ${stats.get('total_waste_detected', 0):,.2f}")
                    print(f"   - Taxa de sucesso: {stats.get('success_rate', 0):.1f}%")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao salvar no BigQuery: {e}")
                if bigquery_integration and execution_id:
                    bigquery_integration.log_execution_complete(
                        execution_id, execution_time, leads_data, 
                        success=False, error_message=str(e)
                    )
        
        return True
        
    except Exception as e:
        if bigquery_integration and execution_id:
            execution_time = time.time() - start_time if start_time else 0
            bigquery_integration.log_execution_complete(
                execution_id, execution_time, [], 
                success=False, error_message=str(e)
            )
        
        print(f"‚ùå Pipeline execution failed: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # System check
    if not print_system_check():
        print("\nüîß Attempting to fix dependencies...")
        if not install_dependencies():
            print("\n‚ùå System check failed. Please install dependencies manually:")
            print("   pip install -r requirements.txt")
            sys.exit(1)
        
        # Re-check ap√≥s instala√ß√£o
        print("\nüîç Re-checking system...")
        if not print_system_check():
            print("‚ùå System still not ready. Please check configuration.")
            sys.exit(1)
    
    print("\nüöÄ System ready! Starting pipeline execution...")
    
    # Executar pipeline
    try:
        success = asyncio.run(execute_pipeline())
        
        if success:
            print("\nüéâ PIPELINE EXECUTION COMPLETED!")
            print("üìÅ Check exports/ folder for results")
            print("üéØ 5 leads qualificados exportados com sucesso")
        else:
            print("\n‚ùå Pipeline execution failed")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Pipeline interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
