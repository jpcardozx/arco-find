#!/usr/bin/env python3
"""
üéØ REAL OUTREACH GENERATOR
Gera materials de contato baseados nos prospects REAIS descobertos
Usa dados do pipeline real e bibliotecas existentes
"""

import json
import os
import sys
from datetime import datetime, timedelta
from typing import List, Dict

# Add src to path to use existing modules
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from core.prospect_filters import ProspectFilters


class RealOutreachGenerator:
    """Gerador baseado em dados REAIS do pipeline"""
    
    def __init__(self):
        self.usd_to_brl = 5.85  # Taxa atual mais precisa
        self.filters = ProspectFilters()
    
    def load_real_prospects_data(self, prospects_file: str) -> Dict:
        """Carrega dados reais do pipeline"""
        try:
            with open(prospects_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå Arquivo n√£o encontrado: {prospects_file}")
            return {}
        except json.JSONDecodeError:
            print(f"‚ùå Erro ao decodificar JSON: {prospects_file}")
            return {}
    
    def generate_real_outreach_package(self, prospects_file: str):
        """Gera pacote baseado em dados REAIS do pipeline"""
        
        # Load real data
        pipeline_data = self.load_real_prospects_data(prospects_file)
        if not pipeline_data:
            return
        
        prospects = pipeline_data.get('top_prospects', [])
        summary = pipeline_data.get('summary', {})
        
        if not prospects:
            print("‚ùå Nenhum prospect encontrado nos dados")
            return
        
        print("üéØ GERANDO OUTREACH BASEADO EM DADOS REAIS")
        print("=" * 60)
        print(f"üìä Prospects: {len(prospects)}")
        print(f"üí∞ Pipeline Value: USD {summary.get('total_pipeline_value', 0):,.0f}")
        print(f"üéØ Expected Revenue: USD {summary.get('expected_revenue', 0):,.0f}")
        
        # Generate using REAL data
        self._generate_real_linkedin_scripts(prospects, summary)
        self._generate_real_whatsapp_scripts(prospects[:3])  # Top 3
        self._generate_real_email_templates(prospects)
        self._generate_real_proposals(prospects[:5])  # Top 5
        self._generate_real_audit_reports(prospects[:3])  # Detailed for top 3
        self._generate_real_execution_checklist(summary, prospects)
        
        print("\n‚úÖ PACOTE REAL DE OUTREACH GERADO!")
        print("üìÅ Arquivos salvos em: real_outreach/")
        print("üöÄ Pronto para execu√ß√£o imediata!")
    
    def _generate_real_linkedin_scripts(self, prospects: List[Dict], summary: Dict):
        """Scripts baseados nos prospects REAIS descobertos"""
        
        scripts = []
        
        for prospect in prospects:
            company = prospect.get('company', 'Empresa')
            domain = prospect.get('domain', '')
            performance_score = prospect.get('performance_score', 50)
            immediate_value = prospect.get('immediate_value', 0)
            issues = prospect.get('issues_found', [])
            priority = prospect.get('priority', 'MEDIUM')
            
            # Real issues text
            issues_text = ' | '.join(issues) if issues else 'Performance e SaaS over-spend'
            
            urgency_emoji = "üö®" if priority == "HIGH" else "‚ö†Ô∏è"
            
            script = f"""
# LINKEDIN SCRIPT - {company} (DADOS REAIS)

**Dom√≠nio:** {domain}
**Score Performance:** {performance_score}/100
**Valor Imediato:** USD {immediate_value:,.0f}
**Issues:** {issues_text}

---

**Mensagem Inicial:**
Ol√° [NOME],

{urgency_emoji} Analisei o {domain} e encontrei algo que pode interessar.

**Performance atual:** {performance_score}/100 (cr√≠tico para convers√µes)
**Oportunidade identificada:** USD {immediate_value:,.0f}/ano em economia

üîç **Problemas espec√≠ficos encontrados:**
{chr(10).join(f"- {issue}" for issue in issues)}

**Proposta:** Diagn√≥stico gratuito de 15min mostrando exatamente onde est√£o os vazamentos.

Se conseguir provar que podem economizar USD {immediate_value//2:,.0f}/ano, toparia uma conversa?

[Calendly Link]

**CTA:** Responda "SIM" se quiser ver o diagn√≥stico espec√≠fico do {domain}.

---

**Follow-up (48h depois):**
[NOME], sobre o {company} - 

Preparei um v√≠deo de 3min mostrando os problemas espec√≠ficos do {domain}:
[Loom Link]

S√£o USD {immediate_value:,.0f}/ano sendo desperdi√ßados. Vale 3min para ver?

**Follow-up (1 semana):**
√öltima sobre o {company} -

{performance_score}/100 de performance = perda direta nas convers√µes.

Se n√£o for prioridade agora, sem stress. Deixo meu contato para o futuro.

Mas s√£o USD {immediate_value//12:,.0f}/m√™s que continuam sendo perdidos... üìâ

---
"""
            scripts.append(script)
        
        # Save scripts
        os.makedirs("real_outreach", exist_ok=True)
        with open("real_outreach/linkedin_scripts_reais.md", 'w', encoding='utf-8') as f:
            header = f"""# üì± LINKEDIN SCRIPTS - DADOS REAIS

**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
**Base:** Pipeline real com {len(prospects)} prospects
**Pipeline Total:** USD {summary.get('total_pipeline_value', 0):,.0f}
**Expectativa:** USD {summary.get('expected_revenue', 0):,.0f}

---

"""
            f.write(header + "\n".join(scripts))
        
        print("‚úÖ Scripts LinkedIn REAIS gerados")
    
    def _generate_real_whatsapp_scripts(self, prospects: List[Dict]):
        """WhatsApp scripts baseados em dados reais"""
        
        scripts = []
        
        for prospect in prospects:
            company = prospect.get('company', 'Empresa')
            domain = prospect.get('domain', '')
            performance_score = prospect.get('performance_score', 50)
            immediate_value = prospect.get('immediate_value', 0)
            issues = prospect.get('issues_found', [])
            
            main_issue = issues[0] if issues else "Performance baixa"
            
            script = f"""
# WHATSAPP - {company} (REAL)

**Target:** {domain}
**Score:** {performance_score}/100  
**Value:** USD {immediate_value:,.0f}/ano

---

**Mensagem 1:**
Oi [NOME]! üëã

Sou especialista em otimiza√ß√£o web e vi que o {domain} tem algumas oportunidades de melhoria.

**Situa√ß√£o atual:** {performance_score}/100 de performance
**Oportunidade:** USD {immediate_value:,.0f}/ano em economia

Principal problema: {main_issue}

Posso mostrar em 2min como resolver isso?

**Mensagem 2 (se responder):**
Perfeito! 

Identifiquei especificamente:
{chr(10).join(f"‚úÖ {issue}" for issue in issues)}

Gravei um v√≠deo de 3min para voc√™s: [Link]

**Oferta:** USD 600 para resolver tudo + garantia de economia m√≠nima de USD {immediate_value//2:,.0f}/ano.

Risco zero para voc√™s.

Quando conseguimos falar 15min?

**Follow-up (24h):**
[NOME], viu o v√≠deo do {domain}?

{main_issue} est√° custando USD {immediate_value//12:,.0f}/m√™s...

Posso resolver em 48h. Topa?

---
"""
            scripts.append(script)
        
        with open("real_outreach/whatsapp_scripts_reais.md", 'w', encoding='utf-8') as f:
            f.write(f"# üì≤ WHATSAPP SCRIPTS - TOP 3 REAIS\n\n{datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
            f.write("\n".join(scripts))
        
        print("‚úÖ Scripts WhatsApp REAIS gerados")
    
    def _generate_real_email_templates(self, prospects: List[Dict]):
        """Email templates baseados nos prospects reais"""
        
        templates = []
        
        for prospect in prospects:
            company = prospect.get('company', 'Empresa')
            domain = prospect.get('domain', '')
            performance_score = prospect.get('performance_score', 50)
            immediate_value = prospect.get('immediate_value', 0)
            issues = prospect.get('issues_found', [])
            tech_stack = prospect.get('tech_stack', {})
            close_probability = prospect.get('close_probability', 0.5)
            
            # Analyze tech stack
            analytics = tech_stack.get('analytics', [])
            tech_info = f"Usando: {', '.join(analytics)}" if analytics else "Tech stack analisado"
            
            template = f"""
# EMAIL TEMPLATE - {company} (DADOS REAIS)

**Target:** {domain}
**Performance:** {performance_score}/100
**Opportunity:** USD {immediate_value:,.0f}/ano
**Close Probability:** {close_probability*100:.0f}%

---

**Subject:** {company}: USD {immediate_value//12:,.0f}/m√™s em oportunidades - An√°lise gratuita

**Corpo:**
Prezado(a) [NOME],

Espero que esteja bem.

Sou [SEU NOME], especialista em otimiza√ß√£o de performance e redu√ß√£o de custos SaaS.

**Por que estou escrevendo:**

Analisei tecnicamente o {domain} e identifiquei oportunidades concretas de economizar **USD {immediate_value:,.0f}/ano**.

üîç **An√°lise t√©cnica realizada:**
- Performance Score: {performance_score}/100 (cr√≠tico)
- {tech_info}
- Problemas identificados: {len(issues)} issues cr√≠ticos

üìä **Problemas espec√≠ficos encontrados:**
{chr(10).join(f"- {issue}" for issue in issues)}

üí∞ **Impacto financeiro calculado:**
- Perda mensal estimada: USD {immediate_value//12:,.0f}
- ROI do projeto: 400-600% no primeiro ano
- Payback: 2-3 meses

**Minha proposta:**
1. **Diagn√≥stico detalhado** (gratuito - 15min)
2. **Implementa√ß√£o express** (48-72h por USD 600-800)
3. **Garantia total:** Se n√£o economizar USD {immediate_value//2:,.0f}/ano, devolvo tudo

**Pr√≥ximo passo:**
Posso mostrar exatamente os problemas em uma call r√°pida?

Calend√°rio: [Calendly Link]

Att,
[SEU NOME]
[TELEFONE]
[LINKEDIN]

P.S.: Anexei um preview da an√°lise t√©cnica do {domain}. Os n√∫meros s√£o bem claros.

---

**Follow-up 1 (3 dias):**
[NOME],

Complementando sobre o {company}.

Preparei um relat√≥rio espec√≠fico mostrando os {len(issues)} problemas cr√≠ticos do {domain}:
[PDF anexo]

Performance {performance_score}/100 = USD {immediate_value//12:,.0f}/m√™s perdidos.

Vale uma conversa de 15min?

**Follow-up 2 (1 semana):**
[NOME],

√öltima sobre a oportunidade de USD {immediate_value:,.0f}/ano no {company}.

Entendo se n√£o √© prioridade agora.

Mas {performance_score}/100 de performance continua impactando as convers√µes...

Meu contato fica dispon√≠vel para quando precisarem.

---
"""
            templates.append(template)
        
        with open("real_outreach/email_templates_reais.md", 'w', encoding='utf-8') as f:
            f.write(f"# üìß EMAIL TEMPLATES - PROSPECTS REAIS\n\n{datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
            f.write("\n".join(templates))
        
        print("‚úÖ Email templates REAIS gerados")
    
    def _generate_real_proposals(self, prospects: List[Dict]):
        """Propostas baseadas nos prospects reais"""
        
        for prospect in prospects:
            company = prospect.get('company', 'Empresa')
            domain = prospect.get('domain', '')
            performance_score = prospect.get('performance_score', 50)
            immediate_value = prospect.get('immediate_value', 0)
            issues = prospect.get('issues_found', [])
            close_probability = prospect.get('close_probability', 0.5)
            
            proposal = f"""
# üíº PROPOSTA PERSONALIZADA - {company}

**Data:** {datetime.now().strftime('%d/%m/%Y')}
**Cliente:** {company}
**Site:** {domain}
**An√°lise:** Conclu√≠da

---

## RESUMO EXECUTIVO

Nossa an√°lise t√©cnica do {domain} identificou oportunidades de **economizar USD {immediate_value:,.0f}/ano** atrav√©s de otimiza√ß√µes espec√≠ficas.

**Situa√ß√£o Atual:**
- Performance Score: {performance_score}/100 (cr√≠tico)
- Probabilidade de sucesso: {close_probability*100:.0f}%
- Impacto financeiro: USD {immediate_value//12:,.0f}/m√™s perdidos

---

## PROBLEMAS IDENTIFICADOS (DADOS REAIS)

{chr(10).join(f"‚úÖ **{issue}**" for issue in issues)}

**Impacto Total:** USD {immediate_value:,.0f}/ano em oportunidades perdidas

---

## SOLU√á√ÉO PROPOSTA

### FASE 1: DIAGN√ìSTICO COMPLETO ‚úÖ (Conclu√≠do)
- ‚úÖ An√°lise t√©cnica do {domain}
- ‚úÖ Identifica√ß√£o de {len(issues)} problemas cr√≠ticos
- ‚úÖ C√°lculo de impacto financeiro
- ‚úÖ Mapeamento de solu√ß√µes

### FASE 2: IMPLEMENTA√á√ÉO EXPRESS (48h)
- Corre√ß√£o de performance cr√≠tica
- Otimiza√ß√£o de ferramentas SaaS
- Implementa√ß√£o de alternativas econ√¥micas
- Configura√ß√£o de monitoramento

### FASE 3: VALIDA√á√ÉO (30 dias)
- Medi√ß√£o de melhoria de performance
- Valida√ß√£o de economia real
- Relat√≥rio de ROI
- Suporte p√≥s-implementa√ß√£o

---

## INVESTIMENTO & GARANTIAS

### OP√á√ÉO RECOMENDADA: EXPRESS
**Investimento:** USD 600 (pagamento √∫nico)
**Economia garantida:** USD {immediate_value//2:,.0f}/ano m√≠nimo
**ROI garantido:** {(immediate_value//2)//600:.0f}x no primeiro ano

### GARANTIAS REAIS:
üõ°Ô∏è **Performance:** Melhoria de pelo menos 30 pontos no score
üõ°Ô∏è **Financeira:** Economia m√≠nima de USD {immediate_value//2:,.0f}/ano
üõ°Ô∏è **Satisfa√ß√£o:** 100% satisfeito ou dinheiro de volta

---

## CRONOGRAMA ESPEC√çFICO

| Dia | Atividade Espec√≠fica |
|-----|---------------------|
| 1 | Aprova√ß√£o e in√≠cio |
| 2 | Implementa√ß√£o das corre√ß√µes do {domain} |
| 3 | Testes e valida√ß√£o |
| 4+ | Monitoramento e suporte |

---

## PR√ìXIMOS PASSOS

1. **Aprova√ß√£o:** Responder este email ou WhatsApp
2. **Pagamento:** 50% in√≠cio + 50% na entrega
3. **In√≠cio:** Dentro de 24h da aprova√ß√£o

**Contato:** [TELEFONE] / [EMAIL]
**Validade:** 7 dias (oferta especial)

---

*Proposta baseada em an√°lise real do {domain} - Dados t√©cnicos validados*
"""
            
            # Save individual proposal
            filename = f"real_outreach/proposta_{company.lower().replace(' ', '_')}.md"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(proposal)
        
        print("‚úÖ Propostas REAIS personalizadas geradas")
    
    def _generate_real_audit_reports(self, prospects: List[Dict]):
        """Relat√≥rios de auditoria baseados em dados reais"""
        
        for prospect in prospects:
            company = prospect.get('company', 'Empresa')
            domain = prospect.get('domain', '')
            performance_score = prospect.get('performance_score', 50)
            immediate_value = prospect.get('immediate_value', 0)
            issues = prospect.get('issues_found', [])
            tech_stack = prospect.get('tech_stack', {})
            close_probability = prospect.get('close_probability', 0.5)
            
            # Analyze tech stack
            analytics = tech_stack.get('analytics', [])
            
            audit = f"""
# üìä AUDITORIA T√âCNICA REAL - {company}

**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
**Site:** {domain}
**Status:** üî¥ PROBLEMAS CR√çTICOS IDENTIFICADOS

---

## DADOS DA AN√ÅLISE REAL

**Performance Score:** {performance_score}/100 üî¥
**Oportunidade Anual:** USD {immediate_value:,.0f}
**Probabilidade Sucesso:** {close_probability*100:.0f}%
**Prioridade:** ALTA

---

## PROBLEMAS ESPEC√çFICOS ENCONTRADOS

{chr(10).join(f"üö® **{issue}**" for issue in issues)}

**Tecnologias Detectadas:**
{chr(10).join(f"- {tool}" for tool in analytics) if analytics else "- Google Analytics (b√°sico)"}

---

## IMPACTO FINANCEIRO CALCULADO

### PERDAS MENSAIS
- Performance baixa: USD {immediate_value//24:,.0f}/m√™s
- SaaS over-spend: USD {immediate_value//24:,.0f}/m√™s
- **Total:** USD {immediate_value//12:,.0f}/m√™s

### OPORTUNIDADE ANUAL
- **Economia potencial:** USD {immediate_value:,.0f}/ano
- **ROI do projeto:** {immediate_value//600:.0f}x
- **Payback:** 2-3 meses

---

## SOLU√á√ïES RECOMENDADAS

### CORRE√á√ïES IMEDIATAS (24-48h)
‚úÖ Otimiza√ß√£o de performance para 80+/100
‚úÖ Substitui√ß√£o de ferramentas caras
‚úÖ Configura√ß√£o de cache e CDN

### IMPLEMENTA√á√ÉO COMPLETA (1 semana)
‚úÖ Otimiza√ß√µes avan√ßadas
‚úÖ Monitoramento automatizado
‚úÖ Relat√≥rios de ROI

---

## PROPOSTA DE IMPLEMENTA√á√ÉO

**Investimento:** USD 600
**Garantia:** Economia m√≠nima de USD {immediate_value//2:,.0f}/ano
**Prazo:** 48-72h
**Suporte:** 30 dias inclu√≠do

**Risco:** ZERO - Devolu√ß√£o integral se n√£o atingir metas

---

## COMPARA√á√ÉO COM BENCHMARK

| M√©trica | {company} | Benchmark | Gap |
|---------|-----------|-----------|-----|
| Performance | {performance_score}/100 | 85/100 | {85-performance_score} pontos |
| Convers√£o | Baixa | Otimizada | +40% potencial |
| Custos SaaS | Alto | Otimizado | USD {immediate_value//12:,.0f}/m√™s |

---

## PR√ìXIMA A√á√ÉO

**Urgente:** Esta an√°lise expira em 7 dias
**Contato:** [TELEFONE] para implementa√ß√£o imediata
**Garantia:** 100% satisfa√ß√£o ou dinheiro de volta

---

*Relat√≥rio t√©cnico baseado em dados reais do {domain}*
*An√°lise realizada em {datetime.now().strftime('%d/%m/%Y')}</i>*
"""
            
            filename = f"real_outreach/auditoria_{company.lower().replace(' ', '_')}.md"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(audit)
        
        print("‚úÖ Auditorias REAIS detalhadas geradas")
    
    def _generate_real_execution_checklist(self, summary: Dict, prospects: List[Dict]):
        """Checklist baseado nos dados reais do pipeline"""
        
        total_value = summary.get('total_pipeline_value', 0)
        expected_revenue = summary.get('expected_revenue', 0)
        num_prospects = len(prospects)
        
        checklist = f"""
# ‚úÖ CHECKLIST EXECU√á√ÉO REAL - 7 DAYS

**Base:** Dados reais do pipeline ARCO-Find
**Data:** {datetime.now().strftime('%d/%m/%Y')}
**Prospects:** {num_prospects} identificados
**Pipeline Total:** USD {total_value:,.0f}
**Expectativa:** USD {expected_revenue:,.0f}
**Meta Conservadora:** USD 1,000-2,000

---

## PROSPECTS REAIS IDENTIFICADOS

{chr(10).join(f"‚úÖ **{p.get('company')}** - {p.get('domain')} - USD {p.get('immediate_value', 0):,.0f}/ano" for p in prospects)}

---

## DIA 1-2: CONTATO DIRETO

### Prepara√ß√£o (1h)
- [x] Scripts LinkedIn personalizados gerados
- [x] WhatsApp templates criados  
- [x] Email sequences profissionais prontos
- [ ] Configurar Calendly com slots 15min
- [ ] Preparar Loom account

### Outreach Imediato (3h)
- [ ] LinkedIn: Contactar top {min(5, num_prospects)} prospects
- [ ] WhatsApp: Top 3 com n√∫meros encontrados
- [ ] Email: Todos os {num_prospects} prospects
- [ ] Follow-up autom√°tico configurado

### Meta Dia 1-2
- [ ] {num_prospects*3} touchpoints enviados
- [ ] 30-40% taxa de resposta esperada
- [ ] 3-5 reuni√µes agendadas

---

## DIA 3-4: DEMOS & PROPOSTAS

### Reuni√µes Agendadas
- [ ] **{prospects[0].get('company')}**: Demo + proposta USD {prospects[0].get('immediate_value', 0):,.0f}
- [ ] **{prospects[1].get('company')}**: Demo + proposta USD {prospects[1].get('immediate_value', 0):,.0f}
- [ ] **{prospects[2].get('company')}**: Demo + proposta USD {prospects[2].get('immediate_value', 0):,.0f}

### Materiais de Fechamento
- [x] Auditorias personalizadas prontas
- [x] Propostas espec√≠ficas geradas
- [ ] ROI calculators configurados
- [ ] Cases de sucesso preparados

### Meta Dia 3-4
- [ ] 3-5 demos executadas
- [ ] 2-3 propostas enviadas
- [ ] 1-2 fechamentos fechados

---

## DIA 5-7: FECHAMENTO & ENTREGA

### Negocia√ß√£o Final
- [ ] Follow-up nas propostas enviadas
- [ ] Negociar desconto se necess√°rio (20% max)
- [ ] Processar pagamentos via Pix/Stripe

### In√≠cio das Entregas
- [ ] Implementar corre√ß√µes b√°sicas (24h)
- [ ] Entregar relat√≥rios iniciais
- [ ] Configurar monitoramento

### Meta Dia 5-7
- [ ] 2-3 contratos assinados
- [ ] USD 1,200-2,400 faturados
- [ ] Primeiras entregas em andamento

---

## PROSPECTS PRIORIT√ÅRIOS (DADOS REAIS)

### TOP 1: {prospects[0].get('company')}
- **Domain:** {prospects[0].get('domain')}
- **Score:** {prospects[0].get('performance_score')}/100
- **Value:** USD {prospects[0].get('immediate_value', 0):,.0f}/ano
- **Issues:** {', '.join(prospects[0].get('issues_found', []))}
- **Action:** Contato imediato via LinkedIn + email

### TOP 2: {prospects[1].get('company')}
- **Domain:** {prospects[1].get('domain')}  
- **Score:** {prospects[1].get('performance_score')}/100
- **Value:** USD {prospects[1].get('immediate_value', 0):,.0f}/ano
- **Issues:** {', '.join(prospects[1].get('issues_found', []))}
- **Action:** WhatsApp + email personalizado

### TOP 3: {prospects[2].get('company')}
- **Domain:** {prospects[2].get('domain')}
- **Score:** {prospects[2].get('performance_score')}/100  
- **Value:** USD {prospects[2].get('immediate_value', 0):,.0f}/ano
- **Issues:** {', '.join(prospects[2].get('issues_found', []))}
- **Action:** Email profissional + LinkedIn

---

## SCRIPTS DE EMERG√äNCIA

### Se baixa resposta (Dia 3):
"Ol√° [NOME], sobre a an√°lise do [DOMAIN] - talvez o timing n√£o seja ideal. S√£o USD [VALUE]/ano sendo perdidos, mas entendo as prioridades. Meu contato fica dispon√≠vel."

### Se obje√ß√£o de pre√ßo:
"Entendo. Que tal assim: USD 300 agora + USD 300 s√≥ quando voc√™s virem os resultados? Risco zero."

### Para acelerar fechamento:
"[NOME], preparei uma condi√ß√£o especial para fechar hoje: 30% desconto + garantia estendida. Vale para hoje apenas."

---

## M√âTRICAS DE SUCESSO REAL

### KPIs Baseados no Pipeline Real
- **Response Rate Target:** 35% (base: {num_prospects} prospects)
- **Meeting Rate:** 60% dos que respondem  
- **Close Rate:** 40% dos que fazem demo
- **Valor M√©dio:** USD {expected_revenue//(num_prospects*0.4):.0f} por deal

### Meta Final Conservadora
- **Contratos:** 2-3 fechados
- **Revenue:** USD 1,200-2,400
- **ROI Campaign:** 300-500%

---

*Checklist baseado em {num_prospects} prospects reais identificados pelo pipeline ARCO-Find*
*Pipeline value: USD {total_value:,.0f} | Expected: USD {expected_revenue:,.0f}*
"""
        
        with open("real_outreach/checklist_execucao_real.md", 'w', encoding='utf-8') as f:
            f.write(checklist)
        
        print("‚úÖ Checklist de execu√ß√£o REAL gerado")


def main():
    """Generate REAL outreach package from actual pipeline results"""
    
    # Find latest real pipeline result
    output_files = [f for f in os.listdir('output') if f.startswith('immediate_pipeline_') and f.endswith('.json')]
    
    if not output_files:
        print("‚ùå Nenhum pipeline real encontrado")
        print("üîß Execute primeiro: python main.py")
        return
    
    # Get most recent
    latest_file = max(output_files, key=lambda f: os.path.getctime(os.path.join('output', f)))
    filepath = os.path.join('output', latest_file)
    
    print(f"üìÅ Usando dados reais: {latest_file}")
    
    # Generate REAL outreach package
    generator = RealOutreachGenerator()
    generator.generate_real_outreach_package(filepath)
    
    print("\nüéØ MATERIAIS DE OUTREACH REAL GERADOS!")
    print("üìÅ Pasta: real_outreach/")  
    print("üöÄ Execute o checklist para come√ßar!")


if __name__ == "__main__":
    main()
