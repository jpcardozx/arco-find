#!/usr/bin/env python3
"""
ðŸŽ¯ ARCO Realistic Data Engine - No BigQuery Required
Sistema que funciona com dados realÃ­sticos sem necessidade de BigQuery
"""

import os
import json
import logging
import random
from typing import Dict, List, Optional
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ARCORealisticDataEngine:
    """Engine de dados realÃ­sticos para ARCO - funciona sem BigQuery"""
    
    def __init__(self):
        self.setup_complete = True
        self.data_mode = "realistic_simulation"
        
        # Base de dados realÃ­stica de empresas EEA+Turkey
        self.dental_companies_base = [
            {"name": "Berlin Dental Excellence", "city": "Berlin", "country": "DE", "spend": 15000},
            {"name": "Zahnarztpraxis Dr. Mueller", "city": "Munich", "country": "DE", "spend": 12000},
            {"name": "Hamburg Implant Center", "city": "Hamburg", "country": "DE", "spend": 18000},
            {"name": "Amsterdam Smile Studio", "city": "Amsterdam", "country": "NL", "spend": 14000},
            {"name": "Tandartspraktijk Central", "city": "Rotterdam", "country": "NL", "spend": 11000},
            {"name": "Dental Care Eindhoven", "city": "Eindhoven", "country": "NL", "spend": 9000},
            {"name": "Madrid Dental Clinic", "city": "Madrid", "country": "ES", "spend": 13000},
            {"name": "Barcelona Smile Center", "city": "Barcelona", "country": "ES", "spend": 16000},
            {"name": "Valencia Oral Care", "city": "Valencia", "country": "ES", "spend": 10000},
            {"name": "Wien Dental Group", "city": "Vienna", "country": "AT", "spend": 14500},
            {"name": "Brussels Dental Care", "city": "Brussels", "country": "BE", "spend": 12500},
            {"name": "Paris Implant Center", "city": "Paris", "country": "FR", "spend": 17000}
        ]
        
        self.aesthetic_companies_base = [
            {"name": "Istanbul Beauty Center", "city": "Istanbul", "country": "TR", "spend": 20000},
            {"name": "Estetik Merkezi Ankara", "city": "Ankara", "country": "TR", "spend": 18000},
            {"name": "GÃ¼zellik Klinik Istanbul", "city": "Istanbul", "country": "TR", "spend": 22000},
            {"name": "Madrid Aesthetic Clinic", "city": "Madrid", "country": "ES", "spend": 16000},
            {"name": "Barcelona Beauty Studio", "city": "Barcelona", "country": "ES", "spend": 14000},
            {"name": "Sevilla Cosmetic Care", "city": "Sevilla", "country": "ES", "spend": 12000},
            {"name": "Milan Beauty Center", "city": "Milan", "country": "IT", "spend": 18000},
            {"name": "Roma Aesthetic Studio", "city": "Rome", "country": "IT", "spend": 15000}
        ]
        
        logger.info("âœ… ARCO Realistic Data Engine initialized")
    
    def discover_dental_companies_eea(self, limit: int = 50) -> List[Dict]:
        """
        ðŸ¦· Descoberta realÃ­stica de empresas dentÃ¡rias EEA
        """
        companies = []
        
        # Generate realistic variations
        for base_company in self.dental_companies_base:
            for variation in range(1, 4):  # 3 variations per base
                if len(companies) >= limit:
                    break
                    
                # Create realistic variation
                company_name = f"{base_company['name']} {variation}"
                if variation == 2:
                    company_name = f"{base_company['name']} Premium"
                elif variation == 3:
                    company_name = f"{base_company['name']} Advanced"
                
                # Generate realistic data
                company = {
                    'company_name': company_name,
                    'website_url': self._generate_realistic_url(company_name),
                    'city': base_company['city'],
                    'country': base_company['country'],
                    'regions': base_company['country'],
                    'discovery_source': 'arco_realistic_simulation',
                    'estimated_monthly_spend': base_company['spend'] + random.randint(-2000, 3000),
                    'first_seen': self._generate_recent_date(-60),
                    'last_seen': self._generate_recent_date(-5),
                    'platforms_active': self._generate_realistic_platforms(),
                    'ad_activity_score': random.randint(60, 95),
                    'qualification_signals': self._generate_qualification_signals()
                }
                
                companies.append(company)
        
        # Sort by spend (highest first)
        companies.sort(key=lambda x: x['estimated_monthly_spend'], reverse=True)
        
        logger.info(f"âœ… Generated {len(companies)} realistic dental companies")
        return companies[:limit]
    
    def discover_aesthetic_companies_turkey_spain(self, limit: int = 50) -> List[Dict]:
        """
        ðŸ’„ Descoberta realÃ­stica de clÃ­nicas estÃ©ticas Turkey+Spain
        """
        companies = []
        
        for base_company in self.aesthetic_companies_base:
            for variation in range(1, 4):
                if len(companies) >= limit:
                    break
                
                company_name = f"{base_company['name']} {variation}"
                if variation == 2:
                    company_name = f"{base_company['name']} Luxury"
                elif variation == 3:
                    company_name = f"{base_company['name']} Elite"
                
                company = {
                    'company_name': company_name,
                    'website_url': self._generate_realistic_url(company_name),
                    'city': base_company['city'],
                    'country': base_company['country'],
                    'regions': base_company['country'],
                    'discovery_source': 'arco_realistic_simulation',
                    'estimated_monthly_spend': base_company['spend'] + random.randint(-3000, 5000),
                    'first_seen': self._generate_recent_date(-90),
                    'last_seen': self._generate_recent_date(-3),
                    'platforms_active': self._generate_realistic_platforms(),
                    'ad_activity_score': random.randint(70, 98),
                    'qualification_signals': self._generate_qualification_signals()
                }
                
                companies.append(company)
        
        companies.sort(key=lambda x: x['estimated_monthly_spend'], reverse=True)
        
        logger.info(f"âœ… Generated {len(companies)} realistic aesthetic companies")
        return companies[:limit]
    
    def _generate_realistic_url(self, company_name: str) -> str:
        """Generate realistic website URL"""
        clean_name = company_name.lower()
        clean_name = clean_name.replace(' ', '').replace('.', '').replace('dr', 'dr')
        
        # Add realistic domain variations
        domains = ['.com', '.de', '.nl', '.es', '.tr', '.at', '.be', '.fr', '.it']
        domain = random.choice(domains)
        
        return f"https://www.{clean_name}{domain}"
    
    def _generate_recent_date(self, days_ago: int) -> str:
        """Generate realistic recent date"""
        date = datetime.now() - timedelta(days=random.randint(1, abs(days_ago)))
        return date.strftime('%Y-%m-%d')
    
    def _generate_realistic_platforms(self) -> List[str]:
        """Generate realistic ad platforms"""
        all_platforms = ['Google Ads', 'Facebook Ads', 'Instagram Ads', 'LinkedIn Ads', 'Bing Ads']
        num_platforms = random.randint(2, 4)
        return random.sample(all_platforms, num_platforms)
    
    def _generate_qualification_signals(self) -> List[Dict]:
        """Generate realistic qualification signals"""
        signals = [
            {'signal': 'mobile_performance_leak', 'score': random.randint(40, 80)},
            {'signal': 'saas_renewal_urgency', 'score': random.randint(500, 1200)},
            {'signal': 'gdpr_compliance_gap', 'score': random.randint(200, 1800)},
            {'signal': 'multilingual_ads_waste', 'score': random.randint(100, 600)}
        ]
        
        return random.sample(signals, random.randint(2, 4))
    
    def get_status_report(self) -> Dict:
        """Get status report of the engine"""
        return {
            'status': 'FULLY_OPERATIONAL',
            'data_mode': self.data_mode,
            'bigquery_required': False,
            'dental_companies_available': len(self.dental_companies_base) * 3,
            'aesthetic_companies_available': len(self.aesthetic_companies_base) * 3,
            'geographic_coverage': ['DE', 'NL', 'ES', 'AT', 'BE', 'FR', 'IT', 'TR'],
            'last_updated': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

def test_realistic_engine():
    """Test the realistic data engine"""
    print("ðŸŽ¯ Testing ARCO Realistic Data Engine...")
    
    engine = ARCORealisticDataEngine()
    
    # Test dental discovery
    dental_companies = engine.discover_dental_companies_eea(15)
    print(f"âœ… Found {len(dental_companies)} dental companies")
    
    for i, company in enumerate(dental_companies[:5]):
        print(f"  {i+1}. {company['company_name']}")
        print(f"     Website: {company['website_url']}")
        print(f"     Location: {company['city']}, {company['country']}")
        print(f"     Monthly Spend: â‚¬{company['estimated_monthly_spend']:,}")
        print(f"     Platforms: {', '.join(company['platforms_active'])}")
        print(f"     Activity Score: {company['ad_activity_score']}/100")
        print()
    
    # Test aesthetic discovery
    aesthetic_companies = engine.discover_aesthetic_companies_turkey_spain(10)
    print(f"âœ… Found {len(aesthetic_companies)} aesthetic companies")
    
    for i, company in enumerate(aesthetic_companies[:3]):
        print(f"  {i+1}. {company['company_name']}")
        print(f"     Website: {company['website_url']}")
        print(f"     Location: {company['city']}, {company['country']}")
        print(f"     Monthly Spend: â‚¬{company['estimated_monthly_spend']:,}")
        print(f"     Activity Score: {company['ad_activity_score']}/100")
        print()
    
    # Status report
    status = engine.get_status_report()
    print("ðŸ“Š Engine Status:")
    print(f"   Status: {status['status']}")
    print(f"   Mode: {status['data_mode']}")
    print(f"   BigQuery Required: {status['bigquery_required']}")
    print(f"   Coverage: {', '.join(status['geographic_coverage'])}")

if __name__ == "__main__":
    test_realistic_engine()
