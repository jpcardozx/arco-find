#!/usr/bin/env python3
"""
ARCO Dependency Check

Fun√ß√£o para verificar se as depend√™ncias do pipeline avan√ßado est√£o prontas.
Se n√£o estiverem, sugere usar o pipeline standard.
"""

import os
import shutil
import yaml
import subprocess

def check_wappalyzer_cli():
    """Verifica se Wappalyzer-CLI est√° funcionando."""
    try:
        result = subprocess.run(['wappalyzer', '--help'], 
                              capture_output=True, timeout=5)
        return result.returncode == 0
    except (subprocess.TimeoutExpired, FileNotFoundError):
        return False

def check_python_wappalyzer():
    """Verifica se o pacote Python wappalyzer est√° dispon√≠vel."""
    try:
        import wappalyzer
        return True
    except ImportError:
        return False

def check_advanced_dependencies():
    """Verifica as depend√™ncias e retorna True se estiverem prontas, False caso contr√°rio."""
    
    print("üîç Verificando depend√™ncias do pipeline avan√ßado...")
    
    # Verificar Wappalyzer-CLI primeiro
    if check_wappalyzer_cli():
        print("‚úÖ Wappalyzer-CLI encontrado e funcionando!")
        return True
    
    print("‚ùå Wappalyzer-CLI n√£o encontrado no PATH")
    
    # Verificar fallback Python
    if check_python_wappalyzer():
        print("‚ö†Ô∏è Usando Wappalyzer Python como fallback (funcionalidade limitada)")
        return True
    
    print("‚ùå Nenhuma vers√£o do Wappalyzer dispon√≠vel")
    print("\nüí° RECOMENDA√á√ÉO:")
    print("Use o pipeline 'standard' que √© 100% funcional sem depend√™ncias externas:")
    print("python main.py standard --domains kotn.com")
    
    return False

def suggest_wappalyzer_setup():
    """Sugere como instalar/configurar Wappalyzer."""
    print("\nüõ†Ô∏è PARA USAR O PIPELINE AVAN√áADO:")
    print("1. OP√á√ÉO R√ÅPIDA - Instalar Python Wappalyzer:")
    print("   pip install wappalyzer")
    print("\n2. OP√á√ÉO COMPLETA - Corrigir PATH do Wappalyzer-CLI:")
    print("   python tools/setup_wappalyzer.py")
    print("\n3. OP√á√ÉO IMEDIATA - Usar pipeline standard:")
    print("   python main.py standard --domains seus_domains")

if __name__ == "__main__":
    if not check_advanced_dependencies():
        suggest_wappalyzer_setup()
